// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, matric_number, first_name, last_name, role, password, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, matric_number, first_name, last_name, role, password, created_at, updated_at
`

type CreateUserParams struct {
	ID           uuid.UUID `json:"id"`
	MatricNumber string    `json:"matric_number"`
	FirstName    string    `json:"first_name"`
	LastName     string    `json:"last_name"`
	Role         UserRole  `json:"role"`
	Password     string    `json:"password"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.MatricNumber,
		arg.FirstName,
		arg.LastName,
		arg.Role,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.MatricNumber,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, matric_number, first_name, last_name, role, password, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.MatricNumber,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByMatricNumber = `-- name: GetUserByMatricNumber :one
SELECT id, matric_number, first_name, last_name, role, password, created_at, updated_at FROM users WHERE matric_number = $1
`

func (q *Queries) GetUserByMatricNumber(ctx context.Context, matricNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByMatricNumber, matricNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.MatricNumber,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
