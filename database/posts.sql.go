// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countPosts = `-- name: CountPosts :one
SELECT COUNT(*) FROM posts
`

func (q *Queries) CountPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, cover_image_url, title, slug, description, content, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, title, content, cover_image_url, created_at, updated_at, description, slug
`

type CreatePostParams struct {
	ID            uuid.UUID      `json:"id"`
	CoverImageUrl string         `json:"cover_image_url"`
	Title         string         `json:"title"`
	Slug          string         `json:"slug"`
	Description   sql.NullString `json:"description"`
	Content       string         `json:"content"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CoverImageUrl,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CoverImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Slug,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPaginatedPosts = `-- name: GetPaginatedPosts :many
SELECT id, title, content, cover_image_url, created_at, updated_at, description, slug FROM posts ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetPaginatedPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPaginatedPosts(ctx context.Context, arg GetPaginatedPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CoverImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, title, content, cover_image_url, created_at, updated_at, description, slug FROM posts WHERE id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CoverImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Slug,
	)
	return i, err
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT id, title, content, cover_image_url, created_at, updated_at, description, slug FROM posts WHERE slug = $1
`

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostBySlug, slug)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CoverImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Slug,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts SET cover_image_url = $2, title = $3, slug = $4, description = $5, content = $6, updated_at = $7
WHERE id = $1 RETURNING id, title, content, cover_image_url, created_at, updated_at, description, slug
`

type UpdatePostParams struct {
	ID            uuid.UUID      `json:"id"`
	CoverImageUrl string         `json:"cover_image_url"`
	Title         string         `json:"title"`
	Slug          string         `json:"slug"`
	Description   sql.NullString `json:"description"`
	Content       string         `json:"content"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.CoverImageUrl,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.Content,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CoverImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Slug,
	)
	return i, err
}
